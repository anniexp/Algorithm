using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GrayCode
{
    class Program
    {
        int[] arr = new int[] { };

        public static int GrayCodeRecursive(int k, int i)
        {
            //   k == codes.Length;
            int a, b;
            int result = 0;
            if (k <= 0)
                return 0;
            if (k == 1)
                return 1;
            else
            {
                // Taking last digit 
                a = k % 10;
                k = k / 10;
                b = k % 10;

                if ((a & ~b) == 1 || (~a & b) == 1)
                {
                    result = (int)(result + Math.Pow(10, a));
                }
                return GrayCodeRecursive(k, ++a) + result;
            }
        }
            public static int GrayCodeRecursive1(int k)
            {
                //   k == codes.Length;
              
                if (k <= 0)
                    return 0;
                if (k == 1)
                    return 1;
            return GrayCodeRecursive1(k - 1);


                 string value = GrayCodeRecursive1(k - 1) + " , " + k + " , " + GrayCodeRecursive1(k - 1);
                  Console.WriteLine(value);
            }

            /// <summary>
            /// 
            /// </summary>
            /// <param name="k"></param>
            ///
            public static void GrayCodeNonRecursive(int k)
        {
            // i - number of codes, j - number of
            //generated from the loop codes
            int i;
            int j;
            if (k <=0)
                return ;
            //the generated codes will be stored in arr
            List<string> codes = new List<string>();
            codes.Add("0");
            codes.Add("1");
         
            

            // Enter the prviously generated codes again in code[] in reverse
            // order. Now arr[] has double number of codes. 
            for (i = 2; i < (1 << k); i = i << 1)
            {
                for (j = i - 1; j >= 0; j--)
                {
                    codes.Add(codes[j]);
                }
                // append 0 to the first half   
                for (j = 0; j < i; j++)
                {
                    codes[j] = "0" + codes[j];
                }
                // append 1 to the second half   
                for (j = i; j < 2 * i; j++)
                {
                    codes[j] = "1" + codes[j];
                }
            }
                // print contents of codes[]   
                for (i = 0; i < codes.Count; i++)
                {
                    Console.WriteLine(codes[i]);
                }
                
            
        }

       

        /// <summary>
        /// Iterative construction of the sequence,generated by the Ruler Function
        /// </summary>
        /// <param name="k">paramether of the function G</param>
        public static void SetOfTheRulerFunctionNonRecursive(int k)
        {
            //s - length of array,
            //j -  index of el in the set,
            // i - value of index of el;
            int s = Convert.ToInt32(Math.Pow(2, k) - 1);
            int[] set = new int[s];

            //purvonachalno obhojdame cikul s vujmojnite stoinosti na 
            // elementite na redicata, koyato shte poluchim. Vseki
            //element prisvoyava edna ot tezi stoinisti, taka che 
            //vurtim vtori cikul s tyah. Veche na vsyaka poziciya koyato e 
            //kratna na nyakoya ot vuzmojnite stoinosti prisvoyavame 
            // stoinostta, kakto sa po uslovie chlenovete na reda.
            int i;
            for (i = 1; i <= k; i++)
            {

                for (int j = 1; j <= set.Length; j++)
                {


                    if (j % (Math.Pow(2, (i - 1))) == 0)
                    {
                        set[j - 1] = i;
                    }
                }

            }

            foreach (Object obj in set)
                Console.Write("{0}   ", obj);
            Console.WriteLine();

        }




        static void Main(string[] args)
        {
            // int binary_number = 10001100;
            //GrayCodeRecursive(4,0);
            //int k = 3;
            //Console.WriteLine(GrayCodeRecursive1(k));
            // Console.WriteLine(GrayCodeRecursive(binary_number,0));
            // GrayCodeNonRecursive(3);
            SetOfTheRulerFunctionNonRecursive(4);
        }
    }
}
